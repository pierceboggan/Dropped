name: iOS Build & Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest
          
      - name: Install brew dependencies
        run: |
          brew install jq

      - name: Verify Xcode version
        run: |
          xcodebuild -version
          
      - name: Set up simulator
        run: |
          echo "Available simulators before creation:"
          xcrun simctl list devices
          
          # Find the latest available iOS runtime
          LATEST_IOS_RUNTIME=$(xcrun simctl list runtimes ios -j | jq -r '.runtimes[-1].identifier')
          if [ -z "$LATEST_IOS_RUNTIME" ] || [ "$LATEST_IOS_RUNTIME" == "null" ]; then
            echo "Error: Could not determine the latest iOS runtime."
            exit 1
          fi
          echo "Latest iOS runtime: $LATEST_IOS_RUNTIME"
          
          # Define simulator name and device type
          SIM_NAME="CI_iPhone"
          # Using a common device type. If this fails, list available types with: xcrun simctl list devicetypes
          DEVICE_TYPE="com.apple.CoreSimulator.SimDeviceType.iPhone-15" 

          echo "Attempting to create simulator: $SIM_NAME with type $DEVICE_TYPE and runtime $LATEST_IOS_RUNTIME"
          xcrun simctl create "$SIM_NAME" "$DEVICE_TYPE" "$LATEST_IOS_RUNTIME"
          
          # Get the UDID of the newly created simulator
          SIM_UDID=$(xcrun simctl list devices -j | jq -r --arg SIM_NAME "$SIM_NAME" '.devices[$LATEST_IOS_RUNTIME][] | select(.name == $SIM_NAME) | .udid')
          
          if [ -z "$SIM_UDID" ] || [ "$SIM_UDID" == "null" ]; then
            echo "Error: Could not get UDID for created simulator $SIM_NAME."
            echo "Listing all devices for debugging:"
            xcrun simctl list devices -j
            exit 1
          fi
          echo "Created simulator $SIM_NAME with UDID: $SIM_UDID"
          
          # Boot the simulator
          echo "Booting simulator $SIM_UDID..."
          xcrun simctl boot "$SIM_UDID"
          # Wait for boot to complete
          max_attempts=30
          attempt_num=1
          until $(xcrun simctl list devices | grep "$SIM_UDID" | grep -q 'Booted'); do
            if [ "$attempt_num" -ge "$max_attempts" ]; then
              echo "Simulator $SIM_UDID did not boot in time."
              exit 1
            fi
            echo "Waiting for simulator $SIM_UDID to boot... (Attempt $attempt_num/$max_attempts)"
            sleep 5
            attempt_num=$((attempt_num+1))
          done
          echo "Simulator $SIM_UDID booted."
          
          # Make the UDID available to subsequent steps
          echo "SIMULATOR_UDID=$SIM_UDID" >> $GITHUB_ENV

      - name: Build app
        env:
          SIMULATOR_UDID: ${{ env.SIMULATOR_UDID }}
        run: |
          echo "Building with SIMULATOR_UDID: $SIMULATOR_UDID"
          xcodebuild -project Dropped.xcodeproj -scheme Dropped -destination "platform=iOS Simulator,id=$SIMULATOR_UDID" build

      - name: Run unit tests
        env:
          SIMULATOR_UDID: ${{ env.SIMULATOR_UDID }}
        run: |
          echo "Running unit tests with SIMULATOR_UDID: $SIMULATOR_UDID"
          xcodebuild -project Dropped.xcodeproj -scheme Dropped -destination "platform=iOS Simulator,id=$SIMULATOR_UDID" -only-testing:DroppedTests test

      - name: Run UI tests
        env:
          SIMULATOR_UDID: ${{ env.SIMULATOR_UDID }}
        run: |
          echo "Running UI tests with SIMULATOR_UDID: $SIMULATOR_UDID"
          xcodebuild -project Dropped.xcodeproj -scheme Dropped -destination "platform=iOS Simulator,id=$SIMULATOR_UDID" -only-testing:DroppedUITests test
